#Использовать logos
#Использовать v8runner
#Использовать fs

Перем Лог;
Перем РезультатыОбработкиВнешнихОбработок;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

//TODO удалить метод УстановитьЛог и получать лог штатным способом
Процедура УстановитьЛог(Знач ПарамЛог) Экспорт
	Лог = ПарамЛог;
КонецПроцедуры

Процедура Разобрать(Знач Путь, Знач КаталогВыгрузки, 
		Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "") Экспорт

	Перем КаталогВременнойИБ;

	Инициализировать();

	Файл = Новый Файл(Путь);
	КорневойПутьВыходной = ?(Файл.ЭтоКаталог(), Файл.ПолноеИмя, Файл.Путь);

	Если ПустаяСтрока(СтрокаПодключения) Тогда 
		Конфигуратор = Новый УправлениеКонфигуратором();
		КаталогВременнойИБ = ПолучитьИмяВременногоФайла("tmp");
		СоздатьКаталог(КаталогВременнойИБ);
	
		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
		СтрокаПодключения = "/F""" + КаталогВременнойИБ + """";
	КонецЕсли;
	Если Файл.ЭтоКаталог() Тогда
		РазобратьКаталог(Файл, КаталогВыгрузки, КорневойПутьВыходной, 
			СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
	Иначе
		РазобратьФайлВнешняяОбработка(Файл, КаталогВыгрузки, КорневойПутьВыходной, Истина,
			СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
	КонецЕсли;

	Если КаталогВременнойИБ <> Неопределено Тогда
		ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
	КонецЕсли;

	Если РезультатыОбработкиВнешнихОбработок.Количество() > 0 Тогда 
		Для каждого КлючЗначение из РезультатыОбработкиВнешнихОбработок Цикл 
			Лог.Ошибка(КлючЗначение.Значение + " "+ КлючЗначение.Ключ);
		КонецЦикла;
		ВызватьИсключение "Не удалось разобрать "+Путь;
	КонецЕсли;

КонецПроцедуры //Разобрать

Процедура РазобратьКаталог(Знач ОбъектКаталога, Знач КаталогВыгрузки, Знач КаталогКорень, 
	Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы="") Экспорт

	ПутьКаталога = ОбъектКаталога.ПолноеИмя;

	ОтносительныйПутьКаталога = ОбщиеМетоды.ОтносительныйПуть(КаталогКорень, ПутьКаталога);
	ОтносительныйПутьКаталога = ?(ПустаяСтрока(ОтносительныйПутьКаталога), ПутьКаталога, ОтносительныйПутьКаталога);

	ОтносительныйПутьКаталогаПоТекущемуКаталогу = ОбщиеМетоды.ОтносительныйПуть(ТекущийКаталог(), ПутьКаталога);
	ОтносительныйПутьКаталогаВыгрузкиПоТекущемуКаталогу = ОбщиеМетоды.ОтносительныйПуть(ТекущийКаталог(), КаталогВыгрузки);

	Лог.Информация("Разбираю внешние обработки из каталога %1 на исходники в каталог %2, корень %3", 
		ОтносительныйПутьКаталогаПоТекущемуКаталогу, ОтносительныйПутьКаталогаВыгрузкиПоТекущемуКаталогу, ТекущийКаталог());
	
	ИмяКаталогаВыгрузки = Новый Файл(КаталогВыгрузки).Имя;
	
	Файлы = НайтиФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл из Файлы Цикл
		Если Лев(Файл.Имя,4) = ".git" Или Врег(Файл.Имя) = Врег("build") Или Врег(Файл.Имя) = Врег("cache.txt") Тогда
			Продолжить;
		КонецЕсли;
			
		Если Файл.ЭтоКаталог() Тогда
			Если Лев(Файл.Имя,4) = ".git" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Файл.ЭтоКаталог() И 
				ОбъединитьПути(Новый Файл(Файл.ПолноеИмя).ПолноеИмя, "./") = ОбъединитьПути(Новый Файл(КаталогВыгрузки).ПолноеИмя, "./") Тогда
				
				Продолжить;
			КонецЕсли;

			ФайлНовый = Новый Файл(Файл.ПолноеИмя);
			ФайлКаталогВВыгрузке = Новый Файл(ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталога));
			Если НЕ ФайлКаталогВВыгрузке.Существует() Тогда 
				Лог.Отладка(СтрШаблон("Создаем новый каталог %1", ФайлКаталогВВыгрузке.ПолноеИмя));
				СоздатьКаталог(ФайлКаталогВВыгрузке.ПолноеИмя);
			КонецЕсли; 
			
			РазобратьКаталог(ФайлНовый, КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);

		ИначеЕсли ОбщиеМетоды.ТипФайлаПоддерживается(Файл) Тогда
			Лог.Отладка(СтрШаблон("Подготовка выгрузки файла %1 в каталог %2", Файл.Имя, ИмяКаталогаВыгрузки));
			РазобратьФайлВнешняяОбработка(Файл, КаталогВыгрузки, КаталогКорень, Ложь,
				СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
			Лог.Отладка(СтрШаблон("Завершена выгрузка файла %1 в каталог %2", Файл.Имя, ИмяКаталогаВыгрузки));
		Иначе
			
			ОтносительныйПутьКаталогаФайла = ОбщиеМетоды.ОтносительныйПуть(КаталогКорень, Файл.ПолноеИмя);
			Лог.Отладка("ОтносительныйПутьКаталогаФайла <"+ОтносительныйПутьКаталогаФайла+">");
			ПутьФайлаИсходников = ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталогаФайла);
			Лог.Отладка("ПутьФайлаИсходников <"+ПутьФайлаИсходников+">");
			
			ФайлНовый = Новый Файл(ПутьФайлаИсходников);
			КаталогНовый = Новый Файл(ФайлНовый.Путь);
			Если НЕ КаталогНовый.Существует() Тогда 
				СоздатьКаталог(КаталогНовый.ПолноеИмя);
			КонецЕсли;
	   
			Если ФайлНовый.Существует() = Истина Тогда
				
				Лог.Отладка(СтрШаблон("Удаляем файл %1", ПутьФайлаИсходников));
				Попытка
					УдалитьФайлы(ФайлНовый.Путь, ФайлНовый.Имя);    
				Исключение
					Лог.Ошибка("Ошибка удаления файла "+ ПутьФайлаИсходников + ":"+ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
			КопироватьФайл(Файл.ПолноеИмя, ФайлНовый.ПолноеИмя);
			
			Лог.Отладка(СтрШаблон("Завершено копирование файла %1 в каталог %2", Файл.Имя, ФайлНовый.ПолноеИмя));
		КонецЕсли;
	КонецЦикла;
	
	Лог.Информация("Завершена выгрузка каталога %1 в каталог %2, корень %3", 
		ОтносительныйПутьКаталогаПоТекущемуКаталогу, ОтносительныйПутьКаталогаВыгрузкиПоТекущемуКаталогу, ТекущийКаталог());
КонецПроцедуры

Функция РазобратьФайлВнешняяОбработка(Знач Файл, Знач КаталогВыгрузки, Знач КаталогКорень, Знач ВыводитьСообщения,
		Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы) Экспорт

	ПутьФайла = Файл.ПолноеИмя;
	ОтносительныйПуть = ОбщиеМетоды.ОтносительныйПуть(ТекущийКаталог(), ПутьФайла);
	ОтносительныйПутьКаталога = ОбщиеМетоды.ОтносительныйПуть(ТекущийКаталог(), КаталогВыгрузки);

	Сообщение = СтрШаблон("Разбираю внешнюю обработку %1 на исходники в каталог %2, корень %3", 
			ОтносительныйПуть, ОтносительныйПутьКаталога, ТекущийКаталог());

	Если ВыводитьСообщения Тогда
		Лог.Информация(Сообщение);
	Иначе
		Лог.Отладка(Сообщение);
	КонецЕсли;

	Попытка 
		КаталогИсходников = РазобратьФайлВнутрВнешняяОбработка(Файл, КаталогВыгрузки, КаталогКорень, 
			СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
	Исключение
		РезультатыОбработкиВнешнихОбработок.Вставить(ПутьФайла, ОписаниеОшибки());
	КонецПопытки;
	
	Сообщение = СтрШаблон("Завершена проверка необходимости выгрузки файла %1 в каталог %2, корень %3", 
			ОтносительныйПуть, ОтносительныйПутьКаталога, ТекущийКаталог());

	Если ВыводитьСообщения Тогда
		Лог.Информация(Сообщение);
	Иначе
		Лог.Отладка(Сообщение);
	КонецЕсли;
	
	Возврат КаталогИсходников;
	
КонецФункции

Функция РазобратьФайлВнутрВнешняяОбработка(Знач Файл, Знач КаталогВыгрузки, Знач КаталогКорень, 
		Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы)
	
	ПутьФайла = Файл.ПолноеИмя;
	Если Не ОбщиеМетоды.ТипФайлаПоддерживается(Файл) Тогда
		ВызватьИсключение "Тип файла """+Файл.Расширение+""" не поддерживается";
	КонецЕсли;
	
	Ожидаем.Что(Файл.Существует(), "Файл " + ПутьФайла + " должен существовать").ЭтоИстина();
	
	ОтносительныйПутьКаталогаФайла = ОбщиеМетоды.ОтносительныйПуть(КаталогКорень, ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения));
	Лог.Отладка("ОтносительныйПутьКаталогаФайла <"+ОтносительныйПутьКаталогаФайла+">");
	
	ПутьКаталогаИсходников = ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталогаФайла);
	Лог.Отладка("ПутьКаталогаИсходников <"+ПутьКаталогаИсходников+">");
	ПапкаИсходников = Новый Файл(ПутьКаталогаИсходников);

	ОбщиеМетоды.ОбеспечитьПустойКаталог(ПапкаИсходников);
	ЗапуститьРаспаковкуВнешнихОбработок(Файл, ПапкаИсходников, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
	
	Возврат ПапкаИсходников.ПолноеИмя;
	
КонецФункции

Процедура ЗапуститьРаспаковкуВнешнихОбработок(Знач Файл, Знач ПапкаИсходников, 
		Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы)
	
	Лог.Отладка("Запускаем распаковку файла");
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Лог.Отладка(ВерсияПлатформы);
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());
	
	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/DumpExternalDataProcessorOrReportToFiles");
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(ПапкаИсходников.ПолноеИмя)); 
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(Файл.ПолноеИмя));
	
	Конфигуратор.ВыполнитьКоманду(Параметры);
	Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());

	Лог.Отладка("Очищаем каталог временной ИБ");
	УдалитьФайлы(Конфигуратор.ФайлИнформации());

	ИскатьВПодкаталогах = Истина;
	СписокФайлов = НайтиФайлы(ПапкаИсходников.ПолноеИмя, "*.bin", ИскатьВПодкаталогах);
	Лог.Отладка("Найдено файлов выгрузки: "+СписокФайлов.Количество()+" шт.");
	Для Каждого Файл Из СписокФайлов Цикл
		Если Нрег(Прав(Файл.ПолноеИмя, 5)) = ".form" Или Нрег(Файл.Имя) = "form.bin" Тогда
			КаталогФормы = ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения);
			ОбщиеМетоды.ОбеспечитьПустойКаталог(Новый Файл(КаталогФормы));
			УпаковщикМетаданных.РаспаковатьКонтейнерМетаданных(Файл.ПолноеИмя, КаталогФормы);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура Инициализировать()
	РезультатыОбработкиВнешнихОбработок = Новый Соответствие;
КонецПроцедуры

Инициализировать();