#Использовать v8runner
#Использовать asserts

Перем Лог;

// <Описание процедуры>
//
// Параметры:
//   СтрокаПодключения - <Тип.Вид> - <описание параметра>
//   Пользователь - <Тип.Вид> - <описание параметра>
//   Пароль - <Тип.Вид> - <описание параметра>
//   КлючРазрешенияЗапуска - <Тип.Вид> - <описание параметра>
//   ВерсияПлатформы - <Тип.Вид> - <описание параметра>
//   ДополнительныеКлючиЗапуска - <Тип.Вид> - <описание параметра>
//
Процедура ОбновитьКонфигурациюБазыДанных(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
										Знач КлючРазрешенияЗапуска = "", Знач ВерсияПлатформы="", 
										Знач ДополнительныеКлючиЗапуска = "") Экспорт
										

	Лог.Информация("Запускаю обновление конфигурации БД");
	ТекущаяПроцедура = "ОбновитьКонфигурациюБазыДанных";
					
	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+": не задана строка подключения").Заполнено();	
	
	// TODO отрефакторить создание УправлениеКонфигуратором и задание базовых параметров выполнения
	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
		
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(КлючРазрешенияЗапуска);
	КонецЕсли;	
	
	Попытка
		Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Попытка
		Если КаталогВременнойИБ <> Неопределено Тогда
			ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
		КонецЕсли;
	Исключение
	КонецПопытки;

	Лог.Информация("Обновление конфигурации БД завершено.");

КонецПроцедуры //ОбновитьКонфигурациюБазыДанных

// Выполнить команду/действие в режиме 1С:Предприятия
//
// Параметры:
//  СтрокаПодключения - <Строка> - Строка подключения к БД
//  Пользователь - <Строка> - Пользователь
//  Пароль - <Строка> - Пароль для пользователя
//   КлючРазрешенияЗапуска - <Строка> - <описание параметра>
//   ПараметрЗапуска - <Строка> - <описание параметра>
//   ОбработкаДляЗапуска - <Строка> - <описание параметра>
//  ТолстыйКлиент - <Булево> - признак запуска толстого клиента
//   ВерсияПлатформы - <Строка> - <описание параметра>
//   ДополнительныеКлючиЗапуска - <Строка> - <описание параметра>
//
Процедура ЗапуститьВРежимеПредприятия(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
										Знач КлючРазрешенияЗапуска = "", Знач ПараметрЗапуска="", 
										Знач ОбработкаДляЗапуска="", Знач ТолстыйКлиент = Ложь,
										Знач ВерсияПлатформы="", Знач ДополнительныеКлючиЗапуска = "") Экспорт

	Лог.Информация("Выполняю команду/действие в режиме 1С:Предприятие");

	ТекущаяПроцедура = "ЗапуститьВРежимеПредприятия";
					
	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+" не задана строка подключения").Заполнено();	
	
	Конфигуратор = Новый УправлениеКонфигуратором();
		
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;

	Если Не ТолстыйКлиент Тогда
		ТонкийКлиент1С = Конфигуратор.ПутьКТонкомуКлиенту1С(Конфигуратор.ПутьКПлатформе1С());
		Конфигуратор.ПутьКПлатформе1С(ТонкийКлиент1С);
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(КлючРазрешенияЗапуска);
	КонецЕсли;	
	
	ДополнительныеКлючи = ДополнительныеКлючиЗапуска;
	Если Не ПустаяСтрока(ОбработкаДляЗапуска) Тогда
		ДополнительныеКлючи = "" + ДополнительныеКлючи + "/Execute"+ОбщиеМетоды.ОбернутьПутьВКавычки(ОбработкаДляЗапуска);
	КонецЕсли;
	
	Лог.Отладка("ДополнительныеКлючи:"+ДополнительныеКлючи);
	Лог.Отладка("ПараметрЗапуска:"+ПараметрЗапуска);
	
	Попытка
		Конфигуратор.ЗапуститьВРежимеПредприятия(ПараметрЗапуска, Истина, ДополнительныеКлючи);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;

	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Выполнение команды/действие в режиме 1С:Предприятие завершено.");
КонецПроцедуры

Процедура ЗапуститьОбновлениеИзХранилища(
			Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
			Знач СтрокаПодключенияХранилище = "", Знач ПользовательХранилища="", Знач ПарольХранилища="",
			Знач ВерсияХранилища="", Знач ВерсияПлатформы="", Знач ДополнительныеКлючиЗапуска = "") Экспорт

	ТекущаяПроцедура = "ЗапуститьОбновлениеИзХранилища";

	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+" не задана строка подключения").Заполнено();
	Ожидаем.Что(СтрокаПодключенияХранилище, ТекущаяПроцедура+" не задана строка подключения к хранилищу").Заполнено();
	Ожидаем.Что(ПользовательХранилища, ТекущаяПроцедура+" не задан пользователь хранилища").Заполнено();
	
	Конфигуратор = Новый УправлениеКонфигуратором();
		
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаПодключенияХранилище+"""");
	Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");

	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
	КонецЕсли;

	Параметры.Добавить("/ConfigurationRepositoryUpdateCfg"); 
	Параметры.Добавить("-force");
	Если Не ПустаяСтрока(ВерсияХранилища) Тогда
		Параметры.Добавить("-v" + ВерсияХранилища);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДополнительныеКлючиЗапуска) Тогда
		Параметры.Добавить(ДополнительныеКлючиЗапуска);
	КонецЕсли;

	Попытка
		Конфигуратор.ВыполнитьКоманду(Параметры);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;

		Возврат;
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

КонецПроцедуры //ЗапуститьОбновлениеИзХранилища

Функция ПолучитьЛог()
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецЕсли;
	Возврат Лог;	
КонецФункции

ПолучитьЛог();
