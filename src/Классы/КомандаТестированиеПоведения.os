///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Запуск тестирования через фреймворк vanessa-behavior
//
// TODO добавить фичи для проверки команды тестирования vanessa-behavior
// 
// Служебный модуль с набором методов работы с командами приложения
//
// Структура модуля реализована в соответствии с рекомендациями 
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать v8runner
#Использовать asserts

Перем Лог;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписания = 
		"     Запуск тестирования через фреймворк vanessa-behavior
		|     ";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ПараметрыСистемы.ВозможныеКоманды().ТестироватьПоведение, 
		ТекстОписания);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--pathvanessa", 
		"[env RUNNER_PATHVANESSA] путь к внешней обработке, по умолчанию vendor/vanessa-behavior/vanessa-behavior.epf
		|           или переменная окружения RUNNER_PATHVANESSA");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--vanessasettings", 
		"[env RUNNER_VANESSASETTINGS] путь к файлу настроек");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--workspace", 
		"[env RUNNER_WORKSPACE] путь к папке, относительно которой будут определятся макросы $workspace.
		|                 по умолчанию текущий.");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--additional", 
		"Дополнительные параметры для запуска предприятия.");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры (необязательно) - Соответствие - дополнительные параметры
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Лог = ДополнительныеПараметры.Лог;

	ЗапускатьТолстыйКлиент = ОбщиеМетоды.УказанПараметрТолстыйКлиент(ПараметрыКоманды["--ordinaryapp"], Лог);

	ЗапуститьТестироватьПоведение(ОбщиеМетоды.ПолныйПуть(ПараметрыКоманды["--workspace"]),
					ПараметрыКоманды["--ibname"], ПараметрыКоманды["--db-user"], ПараметрыКоманды["--db-pwd"],
					ОбщиеМетоды.ПолныйПуть(ПараметрыКоманды["--vanessasettings"]), 
					ОбщиеМетоды.ПолныйПуть(ПараметрыКоманды["--pathvanessa"]),
					ЗапускатьТолстыйКлиент, ПараметрыКоманды["--additional"],
					ПараметрыКоманды["--v8version"]
					);

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
КонецФункции // ВыполнитьКоманду

// Выполняем запуск тестов для vannessa 
//
// Параметры:
//	РабочийКаталогПроекта - <Строка> - Путь к каталогу с проектом, по умолчанию каталог ./build/out
//  СтрокаПодключения - <Строка> - Строка подключения к БД
//  Пользователь - <Строка> - Пользователь
//  Пароль - <Строка> - Пароль для пользователя
//  ПутьКНастройкам - <Строка> - Путь к файлу настроек запуска тестов
//  ПутьКИнструментам - <Строка> - путь к инструментам, по умолчанию ./vendor/vanessa-behavior
//  ТолстыйКлиент - <Булево> - признак запуска толстого клиента
//  ДопПараметры - <Строка> - дополнительные параметры для передачи в параметры запуска 1с, например /DebugURLtcp://localhost
//  ВерсияПлатформы - <Строка> - Версия платформы
//
Процедура ЗапуститьТестироватьПоведение(Знач РабочийКаталогПроекта = "./build/out", 
										Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="", 
										Знач ПутьКНастройкам = "", Знач ПутьКИнструментам="", Знач ТолстыйКлиент = Ложь, 
										Знач ДопПараметры="", Знач ВерсияПлатформы="") 

	Ожидаем.Что(СтрокаПодключения, "Ожидаем, что строка подключения к ИБ задана, а это не так").Заполнено();

	Конфигуратор = Новый УправлениеКонфигуратором();

	Если РабочийКаталогПроекта = Неопределено Тогда 
		РабочийКаталогПроекта = "./build/out";
	КонецЕсли;
	
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	//Конфигуратор.ПутьКПлатформе1С(Конфигуратор.ПутьКТонкомуКлиенту1С());
	Если ПустаяСтрока(ПутьКИнструментам) Тогда
		ПутьКИнструментам = "./vanessa-behavior/vanessa-behavior.epf";
	КонецЕсли;

	ПутьКИнструментам = ОбщиеМетоды.ПолныйПуть(ПутьКИнструментам);
	
	Если НЕ ПустаяСтрока(ПутьКНастройкам) Тогда
		ПутьКНастройкам = ОбщиеМетоды.ПолныйПуть(ПутьКНастройкам);
	КонецЕсли;

	КлючЗапуска = """StartFeaturePlayer;VBParams=" + ПутьКНастройкам +";workspaceRoot="+ОбщиеМетоды.ПолныйПуть(РабочийКаталогПроекта) + """";
	Лог.Отладка(КлючЗапуска);
	ДополнительныеКлючи = " /Execute""" + ПутьКИнструментам + """ /TESTMANAGER ";
	
	Попытка
		ПараметрыСвязиСБазой = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыСвязиСБазой[0] = "ENTERPRISE";
		ПараметрыСвязиСБазой.Удалить(2);
		ПараметрыСвязиСБазой.Добавить("/C"+КлючЗапуска);

		путьДамп = ПолучитьИмяВременногоФайла("txt");
		ПараметрыСвязиСБазой.Добавить("/out"""+путьДамп+"""");

		Если ДополнительныеКлючи <> Неопределено Тогда
			ПараметрыСвязиСБазой.Добавить(ДополнительныеКлючи);
		КонецЕсли;

		СтрокаЗапуска = ""; СтрокаДляЛога = "";
		Для Каждого Параметр Из ПараметрыСвязиСБазой Цикл
			СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
			Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
				СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
			КонецЕсли;
		КонецЦикла;
		СтрокаЗапуска = СтрокаЗапуска + ДопПараметры;

		Приложение = Конфигуратор.ПутьКТонкомуКлиенту1С();
		Если ТолстыйКлиент Тогда
			Приложение = Конфигуратор.ПутьКПлатформе1С();
		КонецЕсли;

		Если Найти(Приложение, " ") > 0 Тогда 
			Приложение = ОбщиеМетоды.ОбернутьПутьВКавычки(Приложение);
		КонецЕсли;
		Приложение = Приложение + " "+СтрокаЗапуска;
		Попытка
			ЗапуститьПроцессВанессы(Приложение, ОбщиеМетоды.ПолныйПуть("./build/vanessaonline.txt") );
			//ЗапуститьПроцесс(Приложение);    
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Результат = ОбщиеМетоды.ПрочитатьФайлИнформации(путьДамп);
		Лог.Информация(Результат);
		//Проверим итоговый результат работы поведения, для этого в типовой настройке определим путь как $workspaceRoot/build/buildstatus.log
		Результат = ОбщиеМетоды.ПрочитатьФайлИнформации(ОбщиеМетоды.ПолныйПуть("./build/buildstatus.log"));
		Если СокрЛП(Результат) <> "0" Тогда
			ВызватьИсключение "Результат работы не равен 0 "+ Результат;
		КонецЕсли;

	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		Лог.Ошибка("Ошибка:"+ОписаниеОшибки());
		ВызватьИсключение "ЗапуститьТестироватьПоведение";
	КонецПопытки;


КонецПроцедуры // ЗапуститьТестироватьПоведение()

Процедура ЗапуститьПроцессВанессы(Знач СтрокаЗапуска, Знач ПутьКФайлуЛога)

	ПериодОпросаВМиллисекундах = 1000;
	
	НадоЧитатьЛог = Истина;
	КолСтрокЛогаПрочитано = 0;

	Процесс = СоздатьПроцесс(СтрокаЗапуска);
	Процесс.Запустить();

	Приостановить(10000);

	Пока НЕ Процесс.Завершен Цикл
		Если ПериодОпросаВМиллисекундах <> 0 Тогда
			Приостановить(ПериодОпросаВМиллисекундах);
		КонецЕсли;

		// Попытка
		// 	Если Процесс.ПотокВывода.ЕстьДанные Тогда 
		 		//ОчереднаяСтрокаВывода = Процесс.ПотокВывода.Прочитать();
		// 	КонецЕсли;
		// Исключение
		// 	ОчереднаяСтрокаВывода = "";
		// КонецПопытки;
		
		// Если Процесс.ПотокОшибок.ЕстьДанные Тогда 
		 	//ОчереднаяСтрокаОшибок = Процесс.ПотокОшибок.Прочитать();
		// КонецЕсли;
		ОчереднаяСтрокаВывода = "";
		ОчереднаяСтрокаОшибок = "";

		Если Не ПустаяСтрока(ОчереднаяСтрокаВывода) Тогда
			//Лог.Информация()
			ОчереднаяСтрокаВывода = СтрЗаменить(ОчереднаяСтрокаВывода, Символы.ВК, "");
			Если ОчереднаяСтрокаВывода <> "" Тогда
				Лог.Информация("%2%1", ОчереднаяСтрокаВывода, Символы.ПС);
			КонецЕсли;
		КонецЕсли;

		Если Не ПустаяСтрока(ОчереднаяСтрокаОшибок) Тогда
			ОчереднаяСтрокаОшибок = СтрЗаменить(ОчереднаяСтрокаОшибок, Символы.ВК, "");
			Если ОчереднаяСтрокаОшибок <> "" Тогда
				Лог.Ошибка("%2%1", ОчереднаяСтрокаОшибок, Символы.ПС);
			КонецЕсли;
		КонецЕсли;

		Если НадоЧитатьЛог Тогда
			ВывестиНовыеСообщения(ПутьКФайлуЛога, КолСтрокЛогаПрочитано);
		КонецЕсли;	 
	
	КонецЦикла;
	
КонецПроцедуры //ЗапуститьПроцессВанессы

Процедура ВывестиНовыеСообщения(ИмяФайлаЛога, КолСтрокЛогаПрочитано)
	Попытка                     
		МассивСтрок = ПолучитьНовыеСтрокиЛога(ИмяФайлаЛога, КолСтрокЛогаПрочитано);
		Для Каждого Стр Из МассивСтрок Цикл
			Если СокрЛП(Стр) = "" Тогда
				Продолжить;
			КонецЕсли;	 
			Лог.Информация(СокрЛП(Стр));
			//Сообщить(СокрП(Стр));
		КонецЦикла;	
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

Функция ПолучитьНовыеСтрокиЛога(Знач ИмяФайла, КолСтрокЛогаПрочитано)
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат Новый Массив;
	КонецЕсли;	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	ВесьТекст = Текст.Прочитать();
	
	Текст.Закрыть();
	
	Массив = Новый Массив();
	
	МассивСтрок = СтрРазделить(ВесьТекст,Символы.ПС,Истина);
	Если МассивСтрок[МассивСтрок.Количество()-1] = "" Тогда
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
	КонецЕсли;
	
	Для Ккк = (КолСтрокЛогаПрочитано+1) По МассивСтрок.Количество() Цикл
		Массив.Добавить(МассивСтрок[Ккк-1]);
	КонецЦикла;	
	
	
	КолСтрокЛогаПрочитано = МассивСтрок.Количество();
	
	Возврат Массив;
КонецФункции //ПолучитьНовыеСтрокиЛога	
